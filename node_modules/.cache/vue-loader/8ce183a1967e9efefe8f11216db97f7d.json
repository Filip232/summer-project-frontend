{"remainingRequest":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Filip\\projects\\kosztorysy\\src\\views\\Register.vue?vue&type=template&id=63ae9146&scoped=true&","dependencies":[{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\src\\views\\Register.vue","mtime":1596181053756},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593813924973},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1594038038043},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593813924973},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\index.js","mtime":1594038038043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}