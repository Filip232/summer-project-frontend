{"remainingRequest":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Filip\\projects\\kosztorysy\\src\\views\\Create-Estimate.vue?vue&type=template&id=5bf5fb2f&scoped=true&","dependencies":[{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\src\\views\\Create-Estimate.vue","mtime":1595853393393},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593813924973},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1594038038043},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593813924973},{"path":"C:\\Users\\Filip\\projects\\kosztorysy\\node_modules\\vue-loader\\lib\\index.js","mtime":1594038038043}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}